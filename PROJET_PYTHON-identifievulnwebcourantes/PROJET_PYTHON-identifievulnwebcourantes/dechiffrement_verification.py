from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives import padding, hashes
from cryptography.hazmat.primitives.asymmetric import rsa, padding as asym_padding
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.backends import default_backend
import os
import json
import glob

class SecurityVerifier:
    def __init__(self):
        # D√©finition du r√©pertoire de base
        self.base_dir = os.path.dirname(os.path.abspath(__file__))
        
        # Recherche du dossier des cl√©s
        self.keys_dir = self._find_keys_directory()
        if not self.keys_dir:
            raise FileNotFoundError("‚ùå Dossier des cl√©s non trouv√©")
        
        # Chargement de la cl√© publique
        self.public_key = self._load_public_key()

    def _find_keys_directory(self):
        """Recherche le dossier des cl√©s dans le r√©pertoire courant et ses sous-r√©pertoires"""
        # Liste des dossiers possibles pour les cl√©s
        possible_dirs = [
            "keys",
            "key",
            "clefs",
            "clef",
            "certificates",
            "certificats"
        ]
        
        # Recherche dans le r√©pertoire de base
        for dir_name in possible_dirs:
            dir_path = os.path.join(self.base_dir, dir_name)
            if os.path.exists(dir_path) and os.path.isdir(dir_path):
                return dir_path
        
        # Recherche dans les sous-r√©pertoires
        for root, dirs, files in os.walk(self.base_dir):
            for dir_name in possible_dirs:
                if dir_name in dirs:
                    return os.path.abspath(os.path.join(root, dir_name))
        
        return None

    def _load_public_key(self):
        """Charge la cl√© publique depuis le dossier des cl√©s"""
        # Liste des extensions possibles pour les cl√©s publiques
        key_extensions = [".pem", ".pub", ".key", ".crt"]
        
        # Recherche de la cl√© publique
        for ext in key_extensions:
            key_files = glob.glob(os.path.join(self.keys_dir, f"*{ext}"))
            for key_file in key_files:
                try:
                    with open(key_file, "rb") as f:
                        return serialization.load_pem_public_key(
                            f.read(),
                            backend=default_backend()
                        )
                except:
                    continue
        
        raise FileNotFoundError("‚ùå Cl√© publique non trouv√©e")

    def _find_associated_files(self, encrypted_file_path):
        """Trouve les fichiers associ√©s (signature et m√©tadonn√©es)"""
        base_name = os.path.splitext(encrypted_file_path)[0]
        signature_path = None
        metadata_path = None
        
        # Recherche du fichier de signature
        signature_patterns = [
            f"{base_name}.sig",
            f"{base_name}.sign",
            f"{base_name}.signature"
        ]
        for pattern in signature_patterns:
            if os.path.exists(pattern):
                signature_path = pattern
                break
        
        # Recherche du fichier de m√©tadonn√©es
        metadata_patterns = [
            f"{base_name}.meta",
            f"{base_name}.json",
            f"{base_name}.info"
        ]
        
        # Recherche dans le r√©pertoire courant
        for pattern in metadata_patterns:
            if os.path.exists(pattern):
                metadata_path = pattern
                break
        
        # Si non trouv√©, recherche dans le dossier metadata
        if not metadata_path:
            metadata_dir = self._find_metadata_directory()
            if metadata_dir:
                base_name = os.path.basename(base_name)
                for pattern in metadata_patterns:
                    meta_file = os.path.join(metadata_dir, base_name + pattern)
                    if os.path.exists(meta_file):
                        metadata_path = meta_file
                        break
        
        return signature_path, metadata_path

    def _find_metadata_directory(self):
        """Recherche le dossier des m√©tadonn√©es"""
        possible_dirs = [
            "metadata",
            "meta",
            "info",
            "data"
        ]
        
        # Recherche dans le r√©pertoire de base
        for dir_name in possible_dirs:
            dir_path = os.path.join(self.base_dir, dir_name)
            if os.path.exists(dir_path) and os.path.isdir(dir_path):
                return dir_path
        
        # Recherche dans les sous-r√©pertoires
        for root, dirs, files in os.walk(self.base_dir):
            for dir_name in possible_dirs:
                if dir_name in dirs:
                    return os.path.abspath(os.path.join(root, dir_name))
        
        return None

    def verify_signature(self, file_path, signature_path):
        """V√©rifie la signature d'un fichier"""
        try:
            # Lecture du fichier
            with open(file_path, 'rb') as f:
                file_data = f.read()
            
            # Lecture de la signature
            with open(signature_path, 'rb') as f:
                signature = f.read()
            
            # V√©rification de la signature
            self.public_key.verify(
                signature,
                file_data,
                asym_padding.PSS(
                    mgf=asym_padding.MGF1(hashes.SHA256()),
                    salt_length=asym_padding.PSS.MAX_LENGTH
                ),
                hashes.SHA256()
            )
            print("‚úÖ Signature v√©rifi√©e avec succ√®s")
            return True
        except Exception as e:
            print(f"‚ùå Erreur lors de la v√©rification de la signature : {str(e)}")
            return False

    def decrypt_file(self, encrypted_file_path, aes_key_hex):
        """D√©chiffre un fichier avec la cl√© AES"""
        try:
            # Conversion de la cl√© hexad√©cimale en bytes
            aes_key = bytes.fromhex(aes_key_hex)
            
            # Lecture du fichier chiffr√©
            with open(encrypted_file_path, 'rb') as f:
                # Lecture du IV (16 premiers bytes)
                iv = f.read(16)
                # Lecture des donn√©es chiffr√©es
                encrypted_data = f.read()
            
            # Cr√©ation du cipher AES
            cipher = Cipher(
                algorithms.AES(aes_key),
                modes.CBC(iv),
                backend=default_backend()
            )
            decryptor = cipher.decryptor()
            
            # D√©chiffrement
            padded_data = decryptor.update(encrypted_data) + decryptor.finalize()
            
            # Suppression du padding
            unpadder = padding.PKCS7(algorithms.AES.block_size).unpadder()
            data = unpadder.update(padded_data) + unpadder.finalize()
            
            # Cr√©ation du fichier d√©chiffr√©
            decrypted_file_path = os.path.splitext(encrypted_file_path)[0]
            with open(decrypted_file_path, 'wb') as f:
                f.write(data)
            
            print(f"‚úÖ Fichier d√©chiffr√© avec succ√®s : {decrypted_file_path}")
            return decrypted_file_path
            
        except Exception as e:
            print(f"‚ùå Erreur lors du d√©chiffrement : {str(e)}")
            return None

def list_encrypted_files():
    """Liste tous les fichiers chiffr√©s disponibles"""
    # D√©finition du r√©pertoire de base
    base_dir = os.path.dirname(os.path.abspath(__file__))
    
    # Recherche des fichiers chiffr√©s avec diff√©rentes extensions possibles
    encrypted_extensions = [".enc", ".encrypted", ".crypt", ".crypto"]
    encrypted_files = []
    
    # Recherche dans le r√©pertoire de base
    for ext in encrypted_extensions:
        pattern = os.path.join(base_dir, f"*{ext}")
        found_files = glob.glob(pattern)
        # Ne garder que les fichiers qui ne sont pas des signatures
        encrypted_files.extend([f for f in found_files if not f.endswith('.sig')])
    
    if not encrypted_files:
        print("‚ùå Aucun fichier chiffr√© trouv√© dans le r√©pertoire.")
        return None
    
    print("\nüìÅ Fichiers chiffr√©s disponibles :")
    for i, file in enumerate(encrypted_files, 1):
        print(f"{i}. {os.path.basename(file)}")
    
    while True:
        try:
            choice = input("\nChoisissez le num√©ro du fichier √† d√©chiffrer (0 pour quitter) : ").strip()
            if not choice:
                continue
            choice = int(choice)
            if choice == 0:
                return None
            if 1 <= choice <= len(encrypted_files):
                return encrypted_files[choice - 1]
            print("‚ùå Choix invalide. Veuillez r√©essayer.")
        except ValueError:
            print("‚ùå Veuillez entrer un num√©ro valide.")

def verify_and_decrypt_file(encrypted_file_path):
    """Fonction principale pour v√©rifier et d√©chiffrer un fichier"""
    try:
        # Cr√©ation du v√©rificateur
        verifier = SecurityVerifier()
        
        # Construction des chemins des fichiers associ√©s
        base_name = os.path.splitext(encrypted_file_path)[0]  # Enl√®ve .enc
        signature_path = base_name + '.sig'
        
        # Construction du chemin des m√©tadonn√©es
        # On utilise le nom du fichier original (sans .enc)
        original_name = os.path.basename(base_name)  # Enl√®ve le chemin
        metadata_path = os.path.join(
            os.path.dirname(encrypted_file_path),
            "metadata",
            original_name + '.meta'
        )
        
        print(f"\nüîç Recherche des fichiers associ√©s :")
        print(f"  - Fichier chiffr√© : {os.path.basename(encrypted_file_path)}")
        print(f"  - Signature : {os.path.basename(signature_path)}")
        print(f"  - M√©tadonn√©es : {os.path.basename(metadata_path)}")
        
        # V√©rification de l'existence des fichiers
        if not os.path.exists(encrypted_file_path):
            print(f"‚ùå Fichier chiffr√© non trouv√© : {encrypted_file_path}")
            return False
        if not os.path.exists(signature_path):
            print(f"‚ùå Fichier de signature non trouv√© : {signature_path}")
            return False
        if not os.path.exists(metadata_path):
            print(f"‚ùå Fichier de m√©tadonn√©es non trouv√© : {metadata_path}")
            return False
        
        # Lecture des m√©tadonn√©es
        try:
            with open(metadata_path, 'r') as f:
                metadata = json.load(f)
                print("‚úÖ M√©tadonn√©es charg√©es avec succ√®s")
        except Exception as e:
            print(f"‚ùå Erreur lors de la lecture des m√©tadonn√©es : {str(e)}")
            return False
        
        # V√©rification de la signature
        print("\nüîê V√©rification de la signature...")
        if not verifier.verify_signature(encrypted_file_path, signature_path):
            return False
        
        # D√©chiffrement du fichier
        print("\nüîì D√©chiffrement du fichier...")
        decrypted_file = verifier.decrypt_file(encrypted_file_path, metadata['aes_key'])
        if decrypted_file:
            print("‚úÖ Op√©ration termin√©e avec succ√®s")
            return True
        return False
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification et du d√©chiffrement : {str(e)}")
        return False

if __name__ == "__main__":
    print("üîì Programme de v√©rification et d√©chiffrement de fichiers")
    print("=" * 50)
    while True:
        encrypted_file = list_encrypted_files()
        if encrypted_file is None:
            break
        print(f"\nüìÑ Fichier s√©lectionn√© : {os.path.basename(encrypted_file)}")
        verify_and_decrypt_file(encrypted_file)
        choice = input("\nVoulez-vous d√©chiffrer un autre fichier ? (o/n) : ").lower().strip()
        if choice != 'o':
            break
    print("\nüëã Au revoir !") 